What happens when you initialize a repository? Why do you need to do it?
	Git starts tracking the history of a set of files. You need to do it to create a repository!

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area doesn't actually change the working directory or repository. It's useful because
	you can preview changes before you commit, making sure you actually want to make the changes.

How can you use the staging area to make sure you have one commit per logical change?
	Using the staging area, you can check the files you plan to commit, and make sure what you're 
	commiting makes sense as a logical change. If there are too many or too few files, you can add or
	remove them from the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches would help when wanting to create experimental changes in a project. Or if I want to
	create different versions of the same thing.

How do the diagrams help you visualize the branch structure?
	You can easily see how development has progressed in several areas, and what changes may need
	to be merged back into master.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches combines the commit history from each branch into a single new branch. It 
	automatically compares files and determines what the final file output should be based on the
	additions and deletions made in each branch's commit history.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Pro: automatically merging means that you don't have to go through each file on your own
	Con: automatically merging may overwrite something you don't want